# Azure startup commands for Django
# This script runs after Oryx build completion

# Find the extracted app path (Oryx extracts to a temp directory)
APP_PATH=$(find /tmp -maxdepth 1 -name "8ddb*" -type d 2>/dev/null | head -1)
if [ -z "$APP_PATH" ]; then
    APP_PATH="/home/site/wwwroot"
fi

echo "Using app path: $APP_PATH"

# Activate virtual environment created by Oryx
if [ -f "$APP_PATH/antenv/bin/activate" ]; then
    . $APP_PATH/antenv/bin/activate
    echo "Virtual environment activated"
else
    echo "Virtual environment not found, using system Python"
fi

# Set working directory to the app path
cd $APP_PATH

# Check for SSL certificate file
SSL_CERT_PATH=""
if [ -f "/home/site/wwwroot/BaltimoreCyberTrustRoot.crt.pem" ]; then
    SSL_CERT_PATH="/home/site/wwwroot/BaltimoreCyberTrustRoot.crt.pem"
    echo "Found SSL certificate at: $SSL_CERT_PATH"
elif [ -f "$APP_PATH/BaltimoreCyberTrustRoot.crt.pem" ]; then
    SSL_CERT_PATH="$APP_PATH/BaltimoreCyberTrustRoot.crt.pem"
    echo "Found SSL certificate at: $SSL_CERT_PATH"
else
    echo "SSL certificate not found. Available files:"
    ls -la /home/site/wwwroot/ || echo "wwwroot not accessible"
    ls -la $APP_PATH/ || echo "APP_PATH not accessible"
fi

# Check if MySQL is ready before proceeding
echo "Waiting for MySQL connection..."
python -c "
import os
import time
try:
    import MySQLdb
except ImportError:
    import pymysql
    pymysql.install_as_MySQLdb()
    import MySQLdb

# Get database settings from environment variables
db_host = os.environ.get('AZURE_MYSQL_HOST', 'servicesbladi.mysql.database.azure.com')
db_user = os.environ.get('AZURE_MYSQL_USER', 'servicesbladiadmin')
db_password = os.environ.get('AZURE_MYSQL_PASSWORD', 'Aa123456a')
db_name = os.environ.get('AZURE_MYSQL_NAME', 'servicesbladi')
use_ssl = os.environ.get('AZURE_MYSQL_SSL', 'true').lower() == 'true'

print(f'Connecting to MySQL at {db_host} with user {db_user}, SSL: {use_ssl}')

# Find SSL certificate file
ssl_cert_paths = [
    '/home/site/wwwroot/BaltimoreCyberTrustRoot.crt.pem',
    'BaltimoreCyberTrustRoot.crt.pem'
]

ssl_cert_path = None
for path in ssl_cert_paths:
    if os.path.exists(path):
        ssl_cert_path = path
        print(f'Found SSL certificate at: {path}')
        break

if not ssl_cert_path and use_ssl:
    print('Warning: SSL enabled but certificate not found, trying without SSL certificate validation')

count = 0
while count < 10:
    try:
        if use_ssl:
            # Use SSL with minimal validation for Azure MySQL compatibility
            MySQLdb.connect(
                host=db_host,
                user=db_user,
                passwd=db_password,
                db=db_name,
                ssl={'check_hostname': False}
            )
        else:
            MySQLdb.connect(
                host=db_host,
                user=db_user,
                passwd=db_password,
                db=db_name,
                ssl=False
            )
        print('MySQL connection successful!')
        break
    except Exception as e:
        print(f'MySQL connection attempt {count+1}/10 failed: {e}')
        count += 1
        time.sleep(5)
" || echo "MySQL connection check failed, but continuing anyway"

# Run migrations with error handling
python manage.py migrate --noinput || echo "Migration failed but continuing"

# Create cache table with error handling
python manage.py createcachetable --noinput || echo "Cache table creation failed but continuing"

# Start Gunicorn using the activated virtual environment
exec gunicorn servicesbladi.wsgi:application --bind 0.0.0.0:8000 --workers 2
